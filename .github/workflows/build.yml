name: Build Multi-Platform Releases

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义需要编译的平台
        include:
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: 386
            ext: .exe
          - os: linux
            arch: amd64
            ext: ""
          - os: linux
            arch: 386
            ext: ""
          - os: linux
            arch: arm64
            ext: ""
          - os: darwin
            arch: amd64
            ext: ""
          - os: darwin
            arch: arm64
            ext: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Tidy and download dependencies
      run: |
        go mod tidy
        go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags "-s -w -X main.version=${GITHUB_REF#refs/tags/}" \
          -o dist/subscription-converter-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: subscription-converter-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/subscription-converter-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}

  # 创建发布版本（仅在有标签时运行）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Display structure of downloaded files
      run: ls -la dist/

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*/subscription-converter-*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建 Docker 镜像
  docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max 